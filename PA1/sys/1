/* resched.c  -  resched */

#include <conf.h>
#include <kernel.h>
#include <proc.h>
#include <q.h>
#include "sched.h"
#include "rand.h"
//#include <math.h>


#define lambda 0.1

unsigned long currSP;	/* REAL sp of current process */
extern int ctxsw(int, int, int, int);
/*-----------------------------------------------------------------------
 * resched  --  reschedule processor to highest priority ready process
 *
 * Notes:	Upon entry, currpid gives current process id.
 *		Proctab[currpid].pstate gives correct NEXT state for
 *			current process if other than PRREADY.
 *------------------------------------------------------------------------
 */
int resched()
{
	register struct	pentry	*optr;	/* pointer to old process entry */
	register struct	pentry	*nptr;	/* pointer to new process entry */
	int random;
	random = (int) expdev(lambda);
	int next_proc;
	int curr_proc;
	int old_proc;
	//kprintf("\n random value is = %d\n", random);
	

	if(EXPDISTSCHED == scheduler_class){


	optr= &proctab[currpid];
	//kprintf("\n------------------------\n");
	//kprintf("\n Curr PID %d \n", currpid);
	//kprintf("\n value at random  %d \n", random);
	if (optr->pstate == PRCURR){
                optr->pstate = PRREADY;
        	insert(currpid,rdyhead,optr->pprio);
		}
	curr_proc = q[rdyhead].qnext;
	//old_proc = q[curr_proc].qprev;
	while(random >=  q[curr_proc].qkey &&  q[curr_proc].qnext != rdytail){
	    curr_proc = q[curr_proc].qnext;
	}
	next_proc = curr_proc;
	dequeue(next_proc);
	currpid = next_proc;
	//kprintf("\n next_proc %d\n", next_proc);
	nptr = &proctab[next_proc];
	//kprintf("\n Next PID %s\n", nptr->pname);
        /* remove highest priority process at end of ready list */

        nptr->pstate = PRCURR;          /* mark it currently running    */
#ifdef  RTCLOCK
        preempt = QUANTUM;              /* reset preemption counter     */
#endif

        ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);	
	return(OK);
	}
	
	else if (LINUXSCHED == scheduler_class){
	optr = &proctab[currpid];
	int t_quant;
	nptr = q[rdyhead].qnext;
	int *next_proc = &proctab[nptr];
	kprintf("next process is \n", *next_proc);
	//time_quant = optr->pprio;
	if(optr->counter == 0){
	optr->t_quant = optr->pprio;
	//kprintf("time quant %d\n", optr->t_quant);
	optr->counter += 1;
	}
	if (optr->counter <= optr->pprio){
		optr->t_quant = (optr->counter/2) + optr->pprio;
		//kprintf("else counter %d %d\n",optr->t_quant, optr->counter);
	      	optr->counter += 1;
	}else if (optr->counter == optr->t_quant){
		  kprintf("else time quant %d\n", optr->counter);
 	      	  optr->counter = 0;
	      }
	
	
	
	
	}
	
	
	/* no switch needed if current process priority higher than next*/

	if ( ( (optr= &proctab[currpid])->pstate == PRCURR) &&
	   (lastkey(rdytail)<optr->pprio)) {
		return(OK);
	}
	
	/* force context switch */

	if (optr->pstate == PRCURR) {
		optr->pstate = PRREADY;
		insert(currpid,rdyhead,optr->pprio);
	}

	/* remove highest priority process at end of ready list */

	nptr = &proctab[ (currpid = getlast(rdytail)) ];
	nptr->pstate = PRCURR;		/* mark it currently running	*/
#ifdef	RTCLOCK
	preempt = QUANTUM;		/* reset preemption counter	*/
#endif
	
	ctxsw((int)&optr->pesp, (int)optr->pirmask, (int)&nptr->pesp, (int)nptr->pirmask);
	
	return(OK);
	/* The OLD process returns here when resumed. */
}
